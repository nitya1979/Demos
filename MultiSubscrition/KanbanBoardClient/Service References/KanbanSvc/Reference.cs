//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KanbanBoardClient.KanbanSvc {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectDetail", Namespace="http://schemas.datacontract.org/2004/07/MultiSubscrition")]
    [System.SerializableAttribute()]
    public partial class ProjectDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ReleaseDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectID {
            get {
                return this.ProjectIDField;
            }
            set {
                if ((this.ProjectIDField.Equals(value) != true)) {
                    this.ProjectIDField = value;
                    this.RaisePropertyChanged("ProjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReleaseDate {
            get {
                return this.ReleaseDateField;
            }
            set {
                if ((this.ReleaseDateField.Equals(value) != true)) {
                    this.ReleaseDateField = value;
                    this.RaisePropertyChanged("ReleaseDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskDetail", Namespace="http://schemas.datacontract.org/2004/07/MultiSubscrition")]
    [System.SerializableAttribute()]
    public partial class TaskDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CompletedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCompleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private KanbanBoardClient.KanbanSvc.Priority PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SummaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CompletedDate {
            get {
                return this.CompletedDateField;
            }
            set {
                if ((this.CompletedDateField.Equals(value) != true)) {
                    this.CompletedDateField = value;
                    this.RaisePropertyChanged("CompletedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DueDate {
            get {
                return this.DueDateField;
            }
            set {
                if ((this.DueDateField.Equals(value) != true)) {
                    this.DueDateField = value;
                    this.RaisePropertyChanged("DueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsComplete {
            get {
                return this.IsCompleteField;
            }
            set {
                if ((this.IsCompleteField.Equals(value) != true)) {
                    this.IsCompleteField = value;
                    this.RaisePropertyChanged("IsComplete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public KanbanBoardClient.KanbanSvc.Priority Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectID {
            get {
                return this.ProjectIDField;
            }
            set {
                if ((this.ProjectIDField.Equals(value) != true)) {
                    this.ProjectIDField = value;
                    this.RaisePropertyChanged("ProjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((object.ReferenceEquals(this.SummaryField, value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskId {
            get {
                return this.TaskIdField;
            }
            set {
                if ((this.TaskIdField.Equals(value) != true)) {
                    this.TaskIdField = value;
                    this.RaisePropertyChanged("TaskId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Priority", Namespace="http://schemas.datacontract.org/2004/07/MultiSubscrition")]
    public enum Priority : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Low = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Medium = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        High = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Critical = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="KanbanSvc.IKanbanService", CallbackContract=typeof(KanbanBoardClient.KanbanSvc.IKanbanServiceCallback))]
    public interface IKanbanService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKanbanService/GetProject", ReplyAction="http://tempuri.org/IKanbanService/GetProjectResponse")]
        KanbanBoardClient.KanbanSvc.ProjectDetail GetProject(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKanbanService/GetProject", ReplyAction="http://tempuri.org/IKanbanService/GetProjectResponse")]
        System.Threading.Tasks.Task<KanbanBoardClient.KanbanSvc.ProjectDetail> GetProjectAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKanbanService/GetTasks", ReplyAction="http://tempuri.org/IKanbanService/GetTasksResponse")]
        KanbanBoardClient.KanbanSvc.TaskDetail[] GetTasks(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKanbanService/GetTasks", ReplyAction="http://tempuri.org/IKanbanService/GetTasksResponse")]
        System.Threading.Tasks.Task<KanbanBoardClient.KanbanSvc.TaskDetail[]> GetTasksAsync(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IKanbanService/SaveTaskDetail")]
        void SaveTaskDetail(KanbanBoardClient.KanbanSvc.TaskDetail task);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IKanbanService/SaveTaskDetail")]
        System.Threading.Tasks.Task SaveTaskDetailAsync(KanbanBoardClient.KanbanSvc.TaskDetail task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKanbanService/SubscribeTaskChangeEvent", ReplyAction="http://tempuri.org/IKanbanService/SubscribeTaskChangeEventResponse")]
        void SubscribeTaskChangeEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKanbanService/SubscribeTaskChangeEvent", ReplyAction="http://tempuri.org/IKanbanService/SubscribeTaskChangeEventResponse")]
        System.Threading.Tasks.Task SubscribeTaskChangeEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKanbanService/UnSubscribeTaskChangeEvent", ReplyAction="http://tempuri.org/IKanbanService/UnSubscribeTaskChangeEventResponse")]
        void UnSubscribeTaskChangeEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKanbanService/UnSubscribeTaskChangeEvent", ReplyAction="http://tempuri.org/IKanbanService/UnSubscribeTaskChangeEventResponse")]
        System.Threading.Tasks.Task UnSubscribeTaskChangeEventAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IKanbanServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKanbanService/OnTaskDetailChanged", ReplyAction="http://tempuri.org/IKanbanService/OnTaskDetailChangedResponse")]
        void OnTaskDetailChanged(KanbanBoardClient.KanbanSvc.TaskDetail task);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IKanbanServiceChannel : KanbanBoardClient.KanbanSvc.IKanbanService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KanbanServiceClient : System.ServiceModel.DuplexClientBase<KanbanBoardClient.KanbanSvc.IKanbanService>, KanbanBoardClient.KanbanSvc.IKanbanService {
        
        public KanbanServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public KanbanServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public KanbanServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public KanbanServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public KanbanServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public KanbanBoardClient.KanbanSvc.ProjectDetail GetProject(int Id) {
            return base.Channel.GetProject(Id);
        }
        
        public System.Threading.Tasks.Task<KanbanBoardClient.KanbanSvc.ProjectDetail> GetProjectAsync(int Id) {
            return base.Channel.GetProjectAsync(Id);
        }
        
        public KanbanBoardClient.KanbanSvc.TaskDetail[] GetTasks(int projectId) {
            return base.Channel.GetTasks(projectId);
        }
        
        public System.Threading.Tasks.Task<KanbanBoardClient.KanbanSvc.TaskDetail[]> GetTasksAsync(int projectId) {
            return base.Channel.GetTasksAsync(projectId);
        }
        
        public void SaveTaskDetail(KanbanBoardClient.KanbanSvc.TaskDetail task) {
            base.Channel.SaveTaskDetail(task);
        }
        
        public System.Threading.Tasks.Task SaveTaskDetailAsync(KanbanBoardClient.KanbanSvc.TaskDetail task) {
            return base.Channel.SaveTaskDetailAsync(task);
        }
        
        public void SubscribeTaskChangeEvent() {
            base.Channel.SubscribeTaskChangeEvent();
        }
        
        public System.Threading.Tasks.Task SubscribeTaskChangeEventAsync() {
            return base.Channel.SubscribeTaskChangeEventAsync();
        }
        
        public void UnSubscribeTaskChangeEvent() {
            base.Channel.UnSubscribeTaskChangeEvent();
        }
        
        public System.Threading.Tasks.Task UnSubscribeTaskChangeEventAsync() {
            return base.Channel.UnSubscribeTaskChangeEventAsync();
        }
    }
}
